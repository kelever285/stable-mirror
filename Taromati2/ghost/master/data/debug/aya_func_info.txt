
//大部分來自Dummy-47，經過授權
TOINT
將以文字和實數形式的值轉換成整數形式
TOREAL
將以文字和整數形式的值轉換成實數形式。這裡說的實數就是會保留小數點後6位的形式
TOSTR
將以任何形式的值改成文字列。如果被更改物件是泛用陣列的話，就會以逗號分隔的簡易陣列顯示
GETTYPE
用來調查變數以什麼形式存在\n1整數2實數3文字4泛用陣列什麼的。0是出錯或失敗\n如果泛用陣列只有一個要素，則會返回這個要素的形式（而不是泛用陣列）。
GETTYPEEX
用來調查變數以什麼形式存在\n返回值和GETTYPE是一樣的，但是比它更嚴密\nAYA版本號Tc537-3以上可用
ISFUNC
用於查找人格中是否有對應函數\n0是不存在；\n1是可被作者定義的函數；\n2是SHIORI自帶的函數
ISVAR
查找人格中是否有特定變數存在\n0是不存在；\n1是全域變數；\n2是區域變數\n注意：區域變數檢查只能用在當前事件處理中
CVINT
將數位形式的文字字串轉變為整數。有小數點的話，會去掉小數點後面的部分
CVSTR
將實數值轉變為文字形式。輸出後的結果……看上去是有小數點後6位的實數，但實際上是文字
CVREAL
將數位形式的文字字串轉變為實數。輸出後的結果是有小數點後6位的實數\n……是用來保留的吧
CVAUTO
通過自動判斷，將字串變數輸出為整數或實數。如果不可以轉換就不會轉換，包括混輸和泛用陣列
TOAUTO
通過自動判斷，將字串轉換為整數或實數。如果不可以轉換就不會轉換，包括混輸和泛用陣列
ARRAYSIZE
獲得一個陣列中的項目數量，不管它是簡易陣列還是泛用陣列
SETDELIM
設定標記簡易陣列要素分割的符號。預設符號當然是英文半形逗號\n只能用剪貼板上的這種書寫順序設定
IARRAY
返回空泛用陣列
ASEARCH
查找泛用陣列中的值，會返回最先找到的位置。0代表第一個，-1代表沒有找到\n關聯：RE_ASEARCH
ASEARCHEX
查找泛用陣列中的值，ASEARCH的升級版，會以泛用陣列的形式返回所有被找到的位置，沒找到就返回一個空陣列\n關聯：RE_ASEARCHEX
GETDELIM
告知一個簡易陣列中標記要素分割的符號。預設符號當然是英文半形逗號
ASORT
按規則重新排列要素的順序，僅限泛用陣列\n按照類別分的話，選項有string（按字元編碼順序）int（按整數大小）double（按自然數大小）length（按字元數）；\n按照內容順序的話，選項有昇冪和降冪；\n還有返回值形式index，專門用來輸出“順序”\nAYA版本號Tc540-1以上可用，Tc545-1追加了index的參數
STRSTR
在字串中查找特定文字，返回找到的位置。第一個參數是字串物件，第二個是關鍵字，第三個參數是開始的位置，不可以省略
STRLEN
返回字串的字數。不是按位元組算，漢字這樣的雙位元組字元也是1個字
REPLACE
將文字串中的部分內容替換為其他內容\n此函數機制單純，如果需要進階的功能，請移步\nRE_REPLACE或者RE_REPLACEEX
SUBSTR
從一段文本的某個位置開始，取出一定字數的內容並返回\n如果代表位置的數字小於0，就會從最後開始算起
ERASE
將一段文本從指定位置開始，刪去指定長度的字數，返回處理後的結果
INSERT
對一段文字中指定一個位置，在此插入另一段文字，返回處理後的結果
TOUPPER
將一段文字中含有的小寫英文字母全部轉換為大寫並輸出結果\n或許整理可以方便接下來的其他操作
TOLOWER
將一段文字中含有的大寫英文字母全部轉換為小寫並輸出結果\n或許整理可以方便接下來的其他操作
CUTSPACE
是切去文字前後的空白，包括半形、全形和Tab那種空白\n……但不會從中間剔除空格
TOBINSTR
將十進位下的整數處理成二進位形式，返回值是文字串
TOHEXSTR
將十進位下的整數處理成十六進位形式，返回值是文字串
BINSTRTOI
將二進位數字轉換為十進位數字，返回值是整數形式
HEXSTRTOI
將十六進位數轉換為十進位數字，返回值是整數形式
CHR
用於顯示UCS-2編碼下的字元。代入值當然是UCS-2數碼。偽春菜支援UCS-2的顯示，但我們的編輯工具不支持，在這種時候就很有用
CHRCODE
會輸出一個字元的UCS-2編碼\n要是輸入一個字串就要指定一個位置，默認輸出第一個字的編碼
ISINTSTR
判斷給定的文字串是否可以解釋為整數。可以的話返回1。不能會返回0
ISREALSTR
判斷給定的文字串是否可以解釋為實數。可以的話返回1。不能會返回0
SPLITPATH
分解一個檔路徑，以泛用陣列的形式返回“盤符,路徑,檔案名,檔副檔名（尾碼）”\n失敗會返回0
STRFORM
相當於C語言中的sprintf，以字串形式輸出。最多可以展開1024個字元長度
ANY
在所有要素中隨機選擇一個。給出要素的是陣列、文字或數位都可以。執行時會記錄自己執行的位置（參見LSO）。
GETSTRBYTES
計算某一字串在指定文字編碼下的位元組數。指定文字編碼請參照AYA內部文字編碼ID表
SPLIT
將文字串分割開，轉換為泛用陣列。最大分割數可設置，0或省略為全部分割。這裡的話處理相對簡單，如果要高級的處理，請參照RE_SPLIT
ZEN2HAN
將文字串中含有的全形字符變換為半形。此處的字元包括數位（number）、字母（alphabet）、特殊符號（symbol）和日文假名（kana），可以全部變換也可以指定部分種類變換
HAN2ZEN
將文字串中含有的半形字元變換為全形。此處的字元包括數位（number）、字母（alphabet）、特殊符號（symbol）和日文假名（kana），可以全部變換也可以指定部分種類變換
STRENCODE
將文字串轉換為指定語言編碼下的網路位址字元形式，現在也支援base64。不指定時，預設以0、url的方式轉換\n在TC532-1之前的版本叫做GETSTRURLENCODE
STRDECODE
將指定語言編碼下的網路位址字元形式轉回一般的文字串，現在也支援base64。不指定時，預設以0、url的方式轉換\n在TC532-1之前的版本叫做GETSTRURLDECODE
TRANSLATE
將文字串中的字元一對一地進行替換，相當於Perl中不加任何條件的tr///\n算是一種高速和簡便的方法，而且包括了文字編碼的識別，能夠用“a-z”乃至“①-⑨”的方法去指定，還可以進行複合條件的指定
RE_SEARCH
尋找文字串中符合規則運算式的部分。存在會返回1，否則返回0
RE_MATCH
尋找文字串中與給定規則運算式完全一致的部分。存在會返回1，否則返回0
RE_GREP
尋找文字串中所有與規則運算式相符的部分。詳細的結果要通過RE_GETSTR、RE_GETPOS、RE_GETLEN來取得\n注意：規則運算式在第二參數位
RE_REPLACE
將字串中所有符合規則運算式的部分替換。詳細的結果要通過RE_GETSTR、RE_GETPOS、RE_GETLEN來取得\n如不能確定輸入物件一定是字串，可先用TOSTR處理。如果要替換的內容含有meta標籤，必須使用RE_REPLACEEX
RE_SPLIT
用符合規則運算式的內容來分割字串，返回泛用陣列結果。詳細的結果要通過RE_GETSTR、RE_GETPOS、RE_GETLEN來取得。最大分割數可設置，0或省略為全部分割
RE_GETSTR
以泛用陣列形式返回字串中符合規則運算式的所有結果。如果之前沒有實行正則匹配動作或未匹配到，就會返回空陣列
RE_GETPOS
以泛用陣列形式返回字串中符合規則運算式的每個結果在原字串中的位置。如果之前沒有實行正則匹配動作或未匹配到，就會返回空陣列
RE_GETLEN
以泛用陣列形式返回字串中符合規則運算式的每個結果的長度。如果之前沒有實行正則匹配動作或未匹配到，就會返回空陣列
RE_REPLACEEX
將字串中所有符合規則運算式的部分替換。詳細的結果要通過RE_GETSTR、RE_GETPOS、RE_GETLEN來取得\n可以使用像Perl那樣的元字元\n如不能確定輸入物件一定是字串，可先用TOSTR處理
RE_ASEARCH
在泛用陣列中檢索包含指定字串的第一個結果。如果沒有找到，返回值為-1\n不能同時使用RE_GET系\n如果想要檢索全部的話，需要使用RE_ASEARCHEX
RE_ASEARCHEX
在泛用陣列中檢索包含指定字串的所有結果。返回值也是陣列，如果沒有找到，會返回空陣列\n不能同時使用RE_GET系
RE_OPTION
針對規則運算式操作中，相容Perl字元的部分提供的設定\ni指不區分大小寫，m是多行處理，s是在換行時匹配，x是無視注釋內容。默認條件下是只有多行處理
FUNCTIONEX
調用通用SAORI的函數\nSAORI會給出調用方法，第一引數為SAORI檔以aya.dll為參照的相對路徑，第二引數開始，依次寫上調用時SAORI需要的引數
LOADLIB
載入其他外部庫（DLL）以單次實行。這個庫必須要有與AYA同樣的load/unload/request等c函數。路徑一般是相對aya.dll的路徑，也可以是絕對路徑
UNLOADLIB
實行之後，從記憶體中卸載庫
REQUESTLIB
LOADLIB之後，取得該庫的實行結果。string的部分請填入需要request的內容
CHARSETLIB
設置載入外部庫用的文字編碼。使用時寫在LOADLIB之前。會將所有庫設置成同一編碼，如果要個別指定，用CHARSETLIBEX
CHARSETLIBEX
設置載入某一外部庫用的文字編碼
RAND
隨機取得一個整數。指定一個最大值時，取得範圍為0～最大值-1。如果不指定，就會按照預設的最大值取隨機。\n預設似乎是99……\n\nTc551-1版本追加SRAND設定方法
SRAND
RAND函數的補充設置函數，設置用於取得亂數的“種子”。如果不設置，則會以系統時間作為種子\n要注意RAND可能被使用在系統辭書中\nTc551-1版本追加
FLOOR
舍去實數的小數點後面的部分，向下取整
CEIL
舍去實數的小數點後面的部分，向上取整
ROUND
舍去實數的小數點後面的部分，四捨五入並且依據方向進行取整
SIN
三角函數，返回弧度的正弦值\n順帶一提，弧度和角度直接的換算可以用\nrad = degree * 3.14159265358 / 180 
COS
三角函數，返回弧度的余弦值
TAN
三角函數，返回弧度的正切值
LOG
取得（自然）對數
LOG10
取得常用對數
POW
冪函數。求x的y次冪
SQRT
求某數的平方根
ASIN
反三角函數，通過反正弦求弧度\n順帶一提，角度和弧度之間的換算可以用\ndegree * 180 / 3.14159265358 = rad 
ACOS
反三角函數，通過反余弦求弧度
ATAN
反三角函數，通過反正切求弧度
SINH
雙曲函數，返回弧度的雙曲正弦值
COSH
雙曲函數，返回弧度的雙曲余弦值
TANH
雙曲函數，返回弧度的雙曲正切值
BITWISE_AND
將輸入的兩個整數以二進位形式進行按位元『與』運算並輸出結果\n對於每一個比特位，只有兩個運算元相應的比特位都是1時，結果才為1，否則為0
BITWISE_OR
將輸入的兩個整數以二進位形式進行按位元『或』運算並輸出結果\n對於每一個比特位，當兩個運算元相應的比特位至少有一個1時，結果為1，否則為0
BITWISE_XOR
將輸入的兩個整數以二進位形式進行按位元『異或』運算並輸出結果\n對於每一個比特位，當兩個運算元相應的比特位有且只有一個1時，結果為1，否則為0
BITWISE_NOT
將輸入的整數以二進位形式進行按位元『非』運算並輸出結果\n反轉運算元的比特位，即0變成1，1變成0
BITWISE_SHIFT
將輸入的整數以二進位形式進行按位元移動運算並輸出結果\n將var的二進位形式移動shift位元，shift是正數時向左，負數時向右
FOPEN
打開文件。對任何檔操作前必須有這個動作，在此之前可以用FCHARSET來指定文字編碼。path是檔案名，可用相對路徑或絕對路徑，option以文字指定打開方式。詳細可以參見c語言的fopen
FCLOSE
關閉之前被打開的檔。和FOPEN成對出現，寫在檔操作結束後
FREAD
讀取文件中的1行，不附帶分行符號。檔即之前用FOPEN操作的物件
FREADENCODE
用base64或者url編碼的方式讀取檔。如果用二進位打不開的話，要變換一下分行符號。檔即之前用FOPEN操作的物件。讀取的位元組數可以設置，0為全部。type可選base64和url，默認為base64，對應FWRITEDECODE
FWRITEDECODE
用base64或者url編碼的方式寫入檔。檔即之前用FOPEN操作的物件。寫入的位元組數可以設置，0為全部。type可選base64和url，默認為base64，對應FREADENCODE
FWRITE
按照之前FCHARSET指定的編碼在檔中寫入一行文字（不指定的話就用AYA內碼）。末尾自帶分行符號。檔即之前用FOPEN操作的物件
FWRITE2
按照之前FCHARSET指定的編碼在檔中寫入一行文字（不指定的話就用AYA內碼）。末尾沒有分行符號。檔即之前用FOPEN操作的物件
FCOPY
將檔複製到指定的路徑下。path為檔的絕對或相對路徑，dir為目標路徑
FMOVE
將檔移動到指定的路徑下。path為檔的絕對或相對路徑，dir為目標路徑
MKDIR
新建路徑/資料夾。可以是絕對路徑或相對路徑，但一次只能創建一層路徑，以免出現多層同時處理而報錯
RMDIR
刪除路徑/資料夾。只能刪除空路徑/沒有檔的資料夾
FDEL
刪除檔。可以使用絕對路徑或相對路徑
FRENAME
檔重命名。可以使用絕對路徑或相對路徑
FSIZE
取得檔佔用位元組的大小
FENUM
列舉路徑下存在的所有檔及資料夾，返回值以『,』分割，資料夾的開頭會有『\』。
FCHARSET
指定讀取檔所用的文字編碼。寫在FOPEN之前，每次指定一個檔。指定文字編碼請參照AYA內部文字編碼ID表
FATTRIB
\b[2]取得檔或資料夾的資訊。結果為泛用陣列，依次為：\n\[0]是否檔案（僅WINDOWS）[1]是否壓縮\n\[2]是否資料夾[3]是否隱藏檔(僅WINDOWS）\n\[4]是否普通檔[5]是否本地檔[6]是否唯讀（僅WINDOWS）\n\[7]是否系統檔（僅WINDOWS）[8]是否暫存檔案（僅WINDOWS）\n\[9]檔創建時間（UNIX下為inode更新時間）\n\[10]檔最終更新時間\n時間是以EPOCH為基準計算的，可以再用一次GETTIME來取得
FREADBIN
將文字編碼變換後進行讀取。之前必須要有FOPEN。讀取的長度可指定，如為0則讀取全部。如果檔中有0x00的值存在，預設情況下置換為半形空白，會引起問題，如需要可以自行更換（char）。
FWRITEBIN
將文字編碼變換後進行寫入。之前必須要有FOPEN。讀取的長度可指定，如為0則讀取全部。如果檔中有0x00的值存在，預設情況下置換為半形空白，會引起問題，如需要可以自行更換（char）。
FDIGEST
取得檔的校驗碼。可以指定的type：\nCRC32、MD5、SHA-1
FSEEK
移動檔讀寫進行的位置。基於origin移動offset個位元組數。可以指定的式樣為：\nSEEK_CUR(current)：現在的位置\nSEEK_END(end)：文件末尾\nSEEK_SET(start)：文件開頭
FTELL
獲取現在讀寫指示符在檔中的位置。取得結果為距離檔開頭的位元組數
EVAL
執行給定的單一操作，返回結果。執行函數的時候，不能直接地合成函數的名稱。它自身也不處理條件分歧結構、或直接定義新的函數
ERASEVAR
刪除單個或多個變數。填入變數名稱即可
LETTONAME
將指定的內容(val)代入到某個變數（name）內\n可以用於一次性生成『變數1，變數2，變數3……』的場合，也可以代入泛用陣列
LSO
告知最近一次在某函數或某事件（機制須與ANY相同）中隨機選擇的結果\n它會將所有的結果排列為陣列（包括多種排列組合的情況，會按上下順序窮舉），返回值是被選擇結果在這個陣列中的位置
SAVEVAR
將所有變數進行一次保存。可以進行路徑指定，如省略指定，默認為原來的人格存檔位置（和aya.dll同路徑的variable.cfg）。
GETSETTING
\b[2]取得當前運行的AYA的設定資訊。依次為：\n/
文字名稱\_l[100]數值名稱\_l[170]資訊類別\n/
coreinfo.version\_l[100]0\_l[170]版本號\n/
（無）\_l[100]1\_l[170]文字編碼\n/
coreinfo.path\_l[100]2\_l[170]當前dll的路徑\n/
coreinfo.name\_l[100]3\_l[170]當前dll名稱\n/
coreinfo.author\_l[100]4\_l[170]當前dll作者名\n/
coreinfo.savefile\_l[100]無\_l[170]存檔檔案名\n/
coreinfo.mode\_l[100]無\_l[170]aya當前模式（emergency或normal）
GETFUNCLIST
返回讀取辭書中的所有函數清單。也可以指定『由（prefix）開頭的所有函數』。
GETVARLIST
返回讀取辭書中的所有變數清單。也可以指定『由（prefix）開頭的所有變數』。
GETCALLSTACK
返回函數棧，返回值為多個字串組成的泛用陣列
GETERRORLOG
獲取aya的錯誤記錄，返回泛用陣列
CHARSETTEXTTOID
將用文本表示的文字編碼變換為AYA中的編號
CHARSETIDTOTEXT
將用AYA中的編號表示的文字編碼變換為文本
RESTOREVAR
將所有變數讀取復原。可以進行路徑指定，如省略指定，默認為原來的人格存檔位置（和aya.dll同路徑的variable.cfg）。
EXECUTE
讓path中的檔物件執行option中的命令。主要用於呼叫其他應用程式。也可以僅打開程式而不指定操作
EXECUTE_WAIT
讓path中的檔物件執行option中的命令，同時等待這一操作結束
SETSETTING
變更當前運行的AYA的設定資訊\nname指想要設定的專案，請參照基礎設定檔aya.txt的記述\n不能變更dic、msglang、chaset.dic、checkparser等值
LICENSE
返回AYA的整篇使用許可。是以文字段落合成的泛用陣列
GETTIME
取得現在的時間資訊。是以下述要素構成的泛用陣列：\n\[0]西曆紀年[1]月[2]日[3]星期數（用0～6表示，0為星期天）[4]小時[5]分鐘[6]秒[7]當年的第幾天[8]是否夏令時（1為是）
GETTICKCOUNT
\f[color,red]【只能在WINDOWS下使用】\f[default]取得系統啟動到現在為止經過的時間。單位為毫秒。flag可以設定為0以外的數位……\n如果經過了24天和20小時的話該函數會返回0
GETMEMINFO
返回作業系統的記憶體資訊。返回值是以下各種數值構成的泛用陣列：\n實體記憶體使用率,實體記憶體總量,可用實體記憶體,虛擬記憶體+實體記憶體,可用虛擬記憶體+可用實體記憶體
GETSECCOUNT
參照EPOCH，來計算某一時間經過的秒數。書寫時間的形式可以不唯一\n配合GETTIME使用可以進行時間換算
READFMO
\f[color,red]【只能在WINDOWS下使用】\f[default]取得File Mapping Object（檔映射物件）的內容。FMO的文字編碼為系統預設，讀取中變換為AYA的內部編碼，開頭的4個位元組（代表FMO的大小）會被自動摘除\nname默認是『Sakura』\n如果出現0x00……就可能引起問題
LOGGING
將指定的值寫到運行日誌文檔。同時，也會在debug程式『玉』（tama）上顯示
GETLASTERROR
返回之前發生的系統函數錯誤編碼。沒有出錯的話會返回0。參見AYA系統錯誤表
SETLASTERROR
設定系統函數錯誤的編碼。用整數值代入，參見AYA系統錯誤表
DUMPVAR
在log中記錄變數的轉儲
EmBeD_HiStOrY
aya內部實現%[n]功能的所必須的函數\n是內部使用函數，忽略就可以了
GETSTRURLENCODE
舊式樣，現改叫STRENCODE
GETSTRURLDECODE
舊式樣，現改叫STRDECODE
GETENV
獲取系統中的環境變數\n詳情可以穀歌“環境變數”
DICLOAD
運行時載入辭書，成功時返回0，失敗時什麼也不影響並返回1
GETSYSTEMFUNCLIST
獲取以第一參數（字串）開始的名稱做名稱的aya底層函數清單
GETFUNCINFO
獲取對應函數的定義位置與起始/終止行數，失敗時返回-1
PROCESSGLOBALDEFINE
以辭書中的#globaldefine對參數字串進行處理
UNDEFFUNC
取消指定函數的定義，失敗返回1，成功返回0
UNDEFGLOBALDEFINE
取消#globaldefine定義（並不會消除已帶來的影響），失敗返回1，成功返回0
DICUNLOAD
取消指定dic檔中定義的所有函數和#globaldefine，失敗返回1，成功返回0
ISEVALUABLE
檢查指定字串是否是合法運算式，但不檢查函數或變數名是否真實存在
SETTAMAHWND
設定tama調試器的hwnd，用於向調試器發送資訊
ISGLOBALDEFINE
判斷某個名稱是否是#globaldefine
SETGLOBALDEFINE
運行時定義#globaldefine\n第一參數：定義名\n第二參數：定義內容\n追加的全域定義被放在虛擬辭書“_RUNTIME_DIC_”中\n如果覆蓋了之前的定義，則返回1，否則返回0
APPEND_RUNTIME_DIC
運行時附加函式定義，配合UNDEFFUNC函數可以進行定義的更改\n失敗返回-1，成功返回0
SLEEP
休眠shiori指定的毫秒數\n失敗返回-1，成功返回0
